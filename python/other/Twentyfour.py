# $Id: Twentyfour.py 45 2013-10-06 15:57:20Z korsnack $
#!/bin/python

from Die import Die
from Gambler import RuleSet

# Qualification Probabilities
"""
P(#s Qualified, # of Dice Rolled --> #s Qualified, # of Dice Rolled)

P(0,0 --> 0,1) = 4^6/6^6 = 4096/46656
P(0,0 --> 1,1) = 2*(5^6-4^6)/6^6 = 23058/46656
P(0,0 --> 2  ) = 1-P(0,0 --> 0,1)-P(0,0 --> 2) = 19502/46656
P(0,1 --> 0,2) = 4^5/6^5 = 1024/7776
P(0,1 --> 1,2) = 2*(5^5-4^5)/6^5 = 4202/7776
P(0,1 --> 2  ) = 1-P(0,1 --> 0,2)-P(0,1 --> 1,2) = 2550/7776
P(0,2 --> 0,3) = 4^4/6^4 = 256/1296
P(0,2 --> 1,3) = 2*(5^4-4^4)/6^4 = 738/1296
P(0,2 --> 2  ) = 1-P(0,2 --> 0,3)-P(0,2 --> 1,3) = 302/1296
P(0,3 --> 0,4) = 4^3/6^3 = 64/216
P(0,3 --> 1,4) = 2*(5^3-4^3) = 122/216
P(0,3 --> 2  ) = 1-P(0,3 --> 0,4)-P(0,3 --> 1,4) = 30/216
P(0,4 --> 0,5) = 4^2/6^2 = 16/36
P(0,4 --> 1,5) = 2*(5^2-4^2)/6^2 = 18/36
P(0,4 --> 2  ) = 1-P(0,4 --> 0,5)-P(0,4 --> 1,5) = 2/6
P(0,5 --> 0,6) = 4/6
P(0,5 --> 1,6) = 1-P(0,5 --> 1,6)
P(1,1 --> 1,2) = 5^5/6^5 = 3125/7776
P(1,1 --> 2  ) = 1-P(1,1 --> 1,2) = 4651/7776
P(1,2 --> 1,3) = 5^4/6^4 = 625/1296
P(1,2 --> 2  ) = 1-P(1,2 --> 2)
P(1,3 --> 1,4) = 5^3/6^3 = 125/216
P(1,3 --> 2  ) = 1-P(1,2 --> 1,3) = 91/216
P(1,4 --> 1,5) = 5^2/6^2 = 25/36
P(1,4 --> 2  ) = 1-P(1,3 --> 1,4) = 11/36
P(1,5 --> 1,6) = 5/6
P(1,5 --> 2  ) = 1/6

import numpy as np
np.set_printoptions(precision = 5)

TM = np.matrix([
[0., 4096./46656, 0., 0., 0., 0., 0., 23058./46656, 0., 0., 0., 0., 0., 19502./46656],
[0., 0., 1024./7776, 0., 0., 0., 0., 0.0, 4202./7776, 0., 0., 0., 0., 2550./7776],
[0., 0., 0., 256./1296, 0., 0., 0., 0., 0., 738./1296, 0., 0., 0., 302./1296],
[0., 0., 0., 0., 64./216, 0., 0., 0., 0., 0., 122./216, 0., 0., 30./216],
[0., 0., 0., 0., 0., 16./36, 0., 0., 0., 0., 0., 18./36, 0., 2./36],
[0., 0., 0., 0., 0., 0., 4./6, 0., 0., 0., 0., 0., 2./6, 0.],
[0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 3125./7776, 0., 0., 0., 0., 4651./7776],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 625./1296, 0., 0., 0., 671./1296],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 125./216, 0., 0., 91./216],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 25./36, 0., 11./36],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 5./6, 1./6],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]
])

TM**1
     0,0    0,1    0,2    0,3    0,4    0,5    0,6    1,1    1,2    1,3    1,4    1,5    1,6    2
0,0 [0.     0.0878 0.     0.     0.     0.     0.     0.4942 0.     0.     0.     0.     0.     0.418 ]
0,1 [0.     0.     0.1317 0.     0.     0.     0.     0.     0.5404 0.     0.     0.     0.     0.3279]
0,2 [0.     0.     0.     0.1975 0.     0.     0.     0.     0.     0.5694 0.     0.     0.     0.233 ]
0,3 [0.     0.     0.     0.     0.2963 0.     0.     0.     0.     0.     0.5648 0.     0.     0.1389]
0,4 [0.     0.     0.     0.     0.     0.4444 0.     0.     0.     0.     0.     0.5    0.     0.0556]
0,5 [0.     0.     0.     0.     0.     0.     0.6667 0.     0.     0.     0.     0.     0.3333 0.    ]
0,6 [0.     0.     0.     0.     0.     0.     1.     0.     0.     0.     0.     0.     0.     0.    ]
1,1 [0.     0.     0.     0.     0.     0.     0.     0.     0.4019 0.     0.     0.     0.     0.5981]
1,2 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.4823 0.     0.     0.     0.5177]
1,3 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.5787 0.     0.     0.4213]
1,4 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.6944 0.     0.3056]
1,5 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.8333 0.1667]
1,6 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     1.     0.    ]
2   [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     1.    ]

TM**6
     0,0    0,1    0,2    0,3    0,4    0,5    0,6    1,1    1,2    1,3    1,4    1,5    1,6    2
0,0 [0.     0.     0.     0.     0.     0.     0.0002 0.     0.     0.     0.     0.     0.0431 0.9567]
0,1 [0.     0.     0.     0.     0.     0.     0.0023 0.     0.     0.     0.     0.     0.1252 0.8725]
0,2 [0.     0.     0.     0.     0.     0.     0.0173 0.     0.     0.     0.     0.     0.2883 0.6943]
0,3 [0.     0.     0.     0.     0.     0.     0.0878 0.     0.     0.     0.     0.     0.4942 0.418 ]
0,4 [0.     0.     0.     0.     0.     0.     0.2963 0.     0.     0.     0.     0.     0.5648 0.1389]
0,5 [0.     0.     0.     0.     0.     0.     0.6667 0.     0.     0.     0.     0.     0.3333 0.    ]
0,6 [0.     0.     0.     0.     0.     0.     1.     0.     0.     0.     0.     0.     0.     0.    ]
1,1 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.0649 0.9351]
1,2 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.1615 0.8385]
1,3 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.3349 0.6651]
1,4 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.5787 0.4213]
1,5 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.8333 0.1667]
1,6 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     1.     0.    ]
2   [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     0.     1.    ]
"""
# Game Expectations
"""
d = [1,2,3,4,5,6]
dd = [sorted([i,j], reverse=True) for i in d for j in d]
ddd = [sorted([i,j,k], reverse=True) for i in d for j in d for k in d]
dddd = [sorted([i,j,k,l], reverse=True) for i in d for j in d for k in d for l in d]
<d> = sum(d)/float(len(d)) = 21/6. = 3.5
<dd> = sum([i+max(j, 3.5) for (i,j) in dd])/len(dd) = 296.5/36 = 8.23611
<ddd> = sum([i+max(j+k, j+3.5, 296.5/36) for (i,j,k) in ddd])/len(ddd) = 2899.77778/216 = 13.42490
<dddd> = sum([i+max(j+k+l, j+k+3.5, j+296.5/36, 13.42490) for (i,j,k) in dddd])/len(dddd)
       = 24421.36107/1296 = 18.84364
<G> = ?
"""

class Twentyfour(Die):
    def __init__(self, RS = RuleSet()):
        Die.__init__(self)
        self.RS = RS
        self.evaluate = max
        self.minscore = 0
        self.maxscore = 24

    def play(self, dice = [9,9,9,9,9,9], h = None):
        if not h:
            h = self.minscore
        score = 0
        t,f = 0,0
        while True:
            if not dice:
                break
            dice = sorted(self.roll(len(dice)), reverse=True)
            took = False
            if not t and dice.count(2) > 0:
                dice.remove(2)
                t = 1
                took = True
            if not f and dice.count(4) > 0:
                dice.remove(4)
                f = 1
                took = True
            if not took:
                mx = max(dice)
                dice.remove(mx)
                score += mx
            s = h - score
            for k in self.RS.keep:
                o = dice.count(k)
                if self.RS.qualify and t and f:
                    if o*k >= s:
                        for i in range(o):
                            dice.remove(k)
                            score += k
                else:
                    for i in range(min(o, len(dice)-2+t+f)):
                        dice.remove(k)
                        score += k
            if self.RS.optimal:
                l = len(dice)
                if t and f:
                    if l == 1:
                        one = dice[0]
                        n = max(s, 3.5)
                        if one >= n:
                            score += one
                            break
                    elif l == 2:
                        one,two = dice
                        n = max(s, 8.2)
                        if one+two >= n:
                            score += one+two
                            break
                        elif one+3.5 >= n:
                            dice = [two]
                            score += one
                    elif l == 3:
                        one,two,three = dice
                        n = max(s, 13.4)
                        if one+two+three >= n:
                            score += one+two+three
                            break
                        elif one+two+3.5 >= n:
                            dice = [three]
                            score += one+two
                        elif one+8.2 >= n:
                            dice = [two, three]
                            score += one
                    elif l == 4:
                        one,two,three,four = dice
                        n = max(s, 18.8)
                        if one+two+three+four >= n:
                            score += one+two+three+four
                            break
                        elif one+two+three+3.5 >= n:
                            dice = [four]
                            score += one+two+three
                        elif one+two+8.2 >= n:
                            dice = [three, four]
                            score += one+two
                        elif one+18.8 >= n:
                            dice = [two, three, four]
                            score += one
        if t and f:
            return score
        else:
            return 0
